# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  terraform_actions:
    name: terraform
    runs-on: ubuntu-latest
    steps:
      - name: CheckOut
        uses: actions/checkout@v3
      - name: set up terraform hasicrop
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: configure aws cridentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-south-1"

      - name: terraform init
        run: |
          cd example
          terraform init
          terraform plan
          terraform apply -auto-approve

  wait_for_instances:
    name: Wait for Instances
    runs-on: ubuntu-latest
    needs: terraform_actions
    steps:
      - name: CheckOut
        uses: actions/checkout@v3
      - name: set up terraform hasicrop
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: configure aws cridentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-south-1"

      - name: Wait for Instances to be ready
        run: |
          instances=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].{Instance:InstanceId}' --output json)
          instance_ids=($(echo "$instances" | jq -r '.[][] | .Instance'))  
          
          # while condition sceniro

          for instance_id in "${instance_ids[@]}"; do
              echo "Instance ID: $instance_id"
              
              # Initialize the 'status' variable
              status=""

              # Keep checking the status until it becomes "ok"
              while [ "$status" != "ok" ]; do
                  # Store the result in the 'status' variable
                  status=$(aws ec2 describe-instance-status --instance-ids $instance_id --query 'InstanceStatuses[0].InstanceStatus.Status' --output text)

                  # Check if the status is not "ok"
                  if [ "$status" != "ok" ]; then
                      echo "Status is not 'ok'. Waiting for status to become 'ok'..."
                      sleep 10  # Adjust the sleep duration as needed
                  fi
              done

              # Echo the final status
              echo "Final Status: $status"
          done



